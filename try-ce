<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>ESpace - Create Event</title>

  <style>
    :root{
      --bg:#0b1020;
      --card:#111831;
      --muted:#8aa0bf;
      --text:#e9f0ff;
      --primary:#4da3ff;
      --primary-600:#2b88f0;
      --danger:#ff6b6b;
      --ok:#22c55e;
      --border:#21304e;
      --shadow:0 10px 30px rgba(0,0,0,.35);
      --radius:16px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;
      color:var(--text); background:radial-gradient(1200px 600px at 20% -10%, #152242 0%, transparent 60%), var(--bg);
      display:flex; align-items:flex-start; justify-content:center; padding:40px 16px;
    }
    .container{
      width:min(960px,100%);
      background:linear-gradient(180deg,#111831 0%, #0f152b 100%);
      border:1px solid var(--border);
      border-radius:var(--radius);
      box-shadow:var(--shadow);
      padding:28px;
    }
    header{margin-bottom:18px}
    h1{margin:0 0 4px;font-weight:800;letter-spacing:.2px}
    .subtitle{margin:0;color:var(--muted)}

    .status-message{
      margin:8px 0 16px; padding:10px 12px; border-radius:12px; display:none;
      font-size:14px; background:#0f1b34; border:1px solid var(--border);
    }
    .status-message.show{display:block}
    .status-ok{border-color:#1c6b3a;background:rgba(34,197,94,.12)}
    .status-err{border-color:#7a2633;background:rgba(255,107,107,.12)}

    .event-form{display:grid; gap:16px}
    .form-group label{display:block; margin-bottom:8px; font-weight:600}
    .help-text{color:var(--muted); font-size:12px; margin-top:6px}
    .error-message{color:var(--danger); font-size:12px; min-height:16px; margin-top:6px}

    input[type="text"],
    input[type="number"],
    input[type="datetime-local"],
    input[type="file"],
    textarea{
      width:100%; padding:12px 12px; border-radius:12px;
      border:1px solid var(--border); background:#0e1429; color:var(--text);
      outline:none; transition:.15s border-color, .15s box-shadow;
    }
    textarea{resize:vertical}
    input:focus, textarea:focus{
      border-color:#2c4e8f; box-shadow:0 0 0 4px rgba(77,163,255,.12);
    }
    .invalid{border-color:var(--danger)!important; box-shadow:0 0 0 4px rgba(255,107,107,.15)!important}

    .time-inputs{display:grid; gap:12px}
    @media (min-width:700px){ .time-inputs{grid-template-columns:1fr 1fr} }

    .tags-container{
      display:flex; gap:8px; flex-wrap:wrap; align-items:center;
      padding:8px; border:1px solid var(--border); border-radius:12px; background:#0e1429;
    }
    .tags-display{display:flex; gap:8px; flex-wrap:wrap}
    .tag{
      background:#132148; border:1px solid #243a73; color:#b9c9e8;
      padding:6px 10px; border-radius:999px; font-size:12px; display:inline-flex; gap:6px; align-items:center;
    }
    .tag button{
      all:unset; cursor:pointer; font-weight:700; line-height:1; padding:0 2px;
      color:#9fb4da;
    }
    #tags-input{
      flex:1; min-width:160px; border:none; background:transparent; color:var(--text); padding:6px 8px;
      outline:none;
    }

    .photo-preview{display:flex; gap:10px; flex-wrap:wrap; margin-top:10px}
    .photo-preview img{
      width:120px; height:80px; object-fit:cover; border-radius:12px; border:1px solid var(--border)
    }

    .form-actions{display:flex; gap:10px; justify-content:flex-end; margin-top:6px}
    .btn{
      padding:10px 16px; border-radius:12px; border:1px solid transparent; cursor:pointer;
      font-weight:600; transition:.15s transform,.15s filter,.15s background,.15s opacity;
    }
    .btn:active{transform:translateY(1px)}
    .btn-primary{background:var(--primary); color:#081225}
    .btn-primary:hover{filter:brightness(1.08)}
    .btn-primary:disabled{opacity:.6; cursor:not-allowed}
    .btn-secondary{background:#18223f; color:#cfe1ff; border-color:#27365b}

    /* Modal */
    .modal{
      position:fixed; inset:0; background:rgba(0,0,0,.35);
      display:none; align-items:center; justify-content:center; padding:16px;
    }
    .modal.show{display:flex}
    .modal-content{
      width:min(520px,100%); background:#0f162e; border:1px solid var(--border);
      border-radius:16px; padding:20px; box-shadow:var(--shadow)
    }
    .modal-actions{display:flex; gap:12px; align-items:center; justify-content:flex-end}
    .countdown{color:var(--muted); font-size:14px}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <h1>Create Event</h1>
      <p class="subtitle">Fill out the form below to create your event</p>
    </header>

    <div id="status-message" class="status-message" aria-live="polite" aria-atomic="true"></div>

    <form id="event-form" class="event-form" novalidate>
      <!-- Event Name -->
      <div class="form-group">
        <label for="event-name">Event Name *</label>
        <input type="text" id="event-name" name="eventName" required aria-describedby="event-name-error" placeholder="Enter event name">
        <div id="event-name-error" class="error-message" role="alert"></div>
      </div>

      <!-- Tags -->
      <div class="form-group">
        <label for="tags-input">Tags</label>
        <div class="tags-container">
          <div id="tags-display" class="tags-display"></div>
          <input type="text" id="tags-input" placeholder="Type a tag and press Enter" aria-describedby="tags-help">
        </div>
        <div id="tags-help" class="help-text">Press Enter to add a tag, click Ã— to remove</div>
      </div>

      <!-- Event Time -->
      <div class="form-group">
        <label for="start-time">Event Time *</label>
        <div class="time-inputs">
          <div class="time-group">
            <label for="start-time">Start Time</label>
            <input type="datetime-local" id="start-time" name="startTime" required aria-describedby="start-time-error">
            <div id="start-time-error" class="error-message" role="alert"></div>
          </div>
          <div class="time-group">
            <label for="end-time">End Time</label>
            <input type="datetime-local" id="end-time" name="endTime" required aria-describedby="end-time-error">
            <div id="end-time-error" class="error-message" role="alert"></div>
          </div>
        </div>
      </div>

      <!-- Location -->
      <div class="form-group">
        <label for="location">Location *</label>
        <input type="text" id="location" name="location" required aria-describedby="location-error" placeholder="Enter event location">
        <div id="location-error" class="error-message" role="alert"></div>
      </div>

      <!-- Capacity -->
      <div class="form-group">
        <label for="capacity">Capacity *</label>
        <input type="number" id="capacity" name="capacity" min="0" required aria-describedby="capacity-help capacity-error" placeholder="0 for unlimited">
        <div id="capacity-help" class="help-text">Enter 0 for unlimited capacity</div>
        <div id="capacity-error" class="error-message" role="alert"></div>
      </div>

      <!-- Description -->
      <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" rows="4" aria-describedby="description-help" placeholder="Describe your event..."></textarea>
        <div id="description-help" class="help-text">Optional description of your event</div>
      </div>

      <!-- Promo Photo -->
      <div class="form-group">
        <label for="promo-photo">Promo Photo</label>
        <input type="file" id="promo-photo" name="promoPhoto" accept="image/jpeg,image/png,image/webp" aria-describedby="photo-help photo-error photo-preview">
        <div id="photo-help" class="help-text">JPG, PNG, or WebP format, max 5MB</div>
        <div id="photo-error" class="error-message" role="alert"></div>
        <div id="photo-preview" class="photo-preview"></div>
      </div>

      <!-- Actions -->
      <div class="form-actions">
        <button type="button" id="save-draft" class="btn btn-secondary">Save Draft</button>
        <button type="button" id="publish-event" class="btn btn-primary" disabled>Publish Event</button>
      </div>
    </form>
  </div>

  <!-- Success Modal -->
  <div id="success-modal" class="modal" role="dialog" aria-labelledby="success-title" aria-describedby="success-message">
    <div class="modal-content">
      <h2 id="success-title">Event Published Successfully!</h2>
      <p id="success-message">Do you want to return to the homepage?</p>
      <div class="modal-actions">
        <button id="return-home" class="btn btn-primary">Return Now</button>
        <div id="countdown" class="countdown">Redirecting in <span id="countdown-number">3</span> seconds...</div>
      </div>
    </div>
  </div>

  <script>
    (function(){
      const qs = s => document.querySelector(s);
      const qsa = s => Array.from(document.querySelectorAll(s));

      const form = qs('#event-form');
      const statusBox = qs('#status-message');
      const publishBtn = qs('#publish-event');
      const saveDraftBtn = qs('#save-draft');
      const successModal = qs('#success-modal');
      const returnHomeBtn = qs('#return-home');
      const countdownNumber = qs('#countdown-number');

      // Tags
      const tagsInput = qs('#tags-input');
      const tagsDisplay = qs('#tags-display');
      let tags = [];

      // Preview
      const photoInput = qs('#promo-photo');
      const photoPreview = qs('#photo-preview');
      const photoError = qs('#photo-error');

      // Fields & error map
      const fields = [
        { id: 'event-name',  error: '#event-name-error', required: true },
        { id: 'start-time',  error: '#start-time-error', required: true },
        { id: 'end-time',    error: '#end-time-error',   required: true },
        { id: 'location',    error: '#location-error',   required: true },
        { id: 'capacity',    error: '#capacity-error',   required: true, isNumber: true, min: 0 }
      ];

      function setStatus(msg, ok=true){
        statusBox.textContent = msg;
        statusBox.className = 'status-message show ' + (ok ? 'status-ok' : 'status-err');
      }

      function validateField(cfg){
        const el = document.getElementById(cfg.id);
        const errEl = qs(cfg.error);
        let msg = '';

        if (cfg.required && !el.value.trim()){
          msg = 'This field is required.';
        } else if (cfg.isNumber){
          const v = Number(el.value);
          if (Number.isNaN(v)) msg = 'Please enter a number.';
          else if ('min' in cfg && v < cfg.min) msg = `Must be â‰¥ ${cfg.min}.`;
        }

        // special: time range
        if (!msg && (cfg.id === 'end-time' || cfg.id === 'start-time')){
          const start = qs('#start-time').value;
          const end = qs('#end-time').value;
          if (start && end && new Date(end) < new Date(start)){
            msg = 'End time must be after start time.';
          }
        }

        if (msg){
          el.classList.add('invalid');
          errEl.textContent = msg;
        } else {
          el.classList.remove('invalid');
          errEl.textContent = '';
        }
        return !msg;
      }

      function validateForm(){
        const ok = fields.map(validateField).every(Boolean);
        publishBtn.disabled = !ok;
        return ok;
      }

      // events: live validation
      form.addEventListener('input', validateForm);
      form.addEventListener('change', validateForm);

      // Tags input
      function renderTags(){
        tagsDisplay.innerHTML = '';
        tags.forEach((t, idx) => {
          const chip = document.createElement('span');
          chip.className = 'tag';
          chip.innerHTML = `${escapeHtml(t)} <button aria-label="remove tag" data-i="${idx}">Ã—</button>`;
          tagsDisplay.appendChild(chip);
        });
      }
      tagsDisplay.addEventListener('click', (e)=>{
        if (e.target.matches('button[data-i]')){
          const i = Number(e.target.getAttribute('data-i'));
          tags.splice(i,1);
          renderTags(); persistDraft();
        }
      });
      tagsInput.addEventListener('keydown', (e)=>{
        if (e.key === 'Enter'){
          e.preventDefault();
          const v = tagsInput.value.trim();
          if (v && !tags.includes(v)){
            tags.push(v);
            renderTags(); tagsInput.value=''; persistDraft();
          }
        } else if (e.key === 'Backspace' && !tagsInput.value && tags.length){
          tags.pop(); renderTags(); persistDraft();
        }
      });

      // Photo preview (simple, single image)
      photoInput.addEventListener('change', ()=>{
        photoError.textContent = '';
        photoPreview.innerHTML = '';
        const file = photoInput.files && photoInput.files[0];
        if (!file) return;
        if (file.size > 5*1024*1024){
          photoError.textContent = 'File too large (max 5MB).';
          photoInput.value = '';
          return;
        }
        const url = URL.createObjectURL(file);
        const img = document.createElement('img');
        img.src = url;
        img.alt = 'Preview';
        photoPreview.appendChild(img);
      });

      // Draft save & load (localStorage)
      const LS_KEY = 'espace_event_draft_v1';
      function persistDraft(){
        const data = {
          eventName: qs('#event-name').value,
          startTime: qs('#start-time').value,
          endTime: qs('#end-time').value,
          location: qs('#location').value,
          capacity: qs('#capacity').value,
          description: qs('#description').value,
          tags
        };
        try{
          localStorage.setItem(LS_KEY, JSON.stringify(data));
        }catch(e){}
      }
      function loadDraft(){
        try{
          const raw = localStorage.getItem(LS_KEY);
          if (!raw) return;
          const d = JSON.parse(raw);
          if (d.eventName) qs('#event-name').value = d.eventName;
          if (d.startTime) qs('#start-time').value = d.startTime;
          if (d.endTime) qs('#end-time').value = d.endTime;
          if (d.location) qs('#location').value = d.location;
          if (d.capacity) qs('#capacity').value = d.capacity;
          if (d.description) qs('#description').value = d.description;
          if (Array.isArray(d.tags)) { tags = d.tags; renderTags(); }
        }catch(e){}
      }
      loadDraft();

      saveDraftBtn.addEventListener('click', ()=>{
        persistDraft();
        setStatus('Draft saved locally (this browser only).', true);
      });

      // Publish
      publishBtn.addEventListener('click', ()=>{
        if (!validateForm()){
          setStatus('Please fix the errors above before publishing.', false);
          return;
        }
        setStatus('Publishing...', true);
        // simulate success
        setTimeout(()=>{
          setStatus('');
          openSuccessModal();
        }, 300);
      });

      // Modal & countdown
      function openSuccessModal(){
        successModal.classList.add('show');
        let n = 3;
        countdownNumber.textContent = String(n);
        const timer = setInterval(()=>{
          n -= 1;
          countdownNumber.textContent = String(n);
          if (n <= 0){
            clearInterval(timer);
            // 
            window.location.href = './';
          }
        }, 1000);
        returnHomeBtn.onclick = ()=> {
          window.location.href = './';
        };
      }

      // small helpers
      function escapeHtml(str){
        return str.replace(/[&<>"']/g, s => ({
          '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
        }[s]));
      }

      // 
      validateForm();
    })();
  </script>
</body>
</html>
